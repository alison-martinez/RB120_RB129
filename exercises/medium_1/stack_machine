class MinilangError < StandardError; end
class BadTokenError < MinilangError; end
class EmptyStackError < MinilangError; end

class Minilang
  def initialize(command)
    @command = command
    @register = 0
    @stack = []
  end

  def eval
    commands = @command.downcase.split
    commands.each do |command|
      
      if command.to_i.to_s == command
        self.n(command.to_i)
      else
        self.methods.include?(command.to_sym) ? send(command) : (raise BadTokenError, "Invalid token: #{command.upcase}")
      end
      rescue MinilangError => error
      puts error.message
    end

  end 

  def push
    @stack << @register
  end

  def add
    @register = @stack.pop + @register
  end

  def sub
    @register = @register - @stack.pop
  end

  def mult
    @register = @register * @stack.pop
  end

  def div
    @register = @register / @stack.pop
  end

  def mod
    @register = @register % @stack.pop
  end

  def pop
    @stack.empty? ? (raise EmptyStackError, "Empty stack!") : (@register = @stack.pop)
  end

  def n(int)
    @register = int
  end

  def print
    puts @register
  end


end

Minilang.new('PRINT').eval
# 0

Minilang.new('5 PUSH 3 MULT PRINT').eval
# 15

Minilang.new('5 PRINT PUSH 3 PRINT ADD PRINT').eval
# 5
# 3
# 8

Minilang.new('5 PUSH 10 PRINT POP PRINT').eval
# 10
# 5

Minilang.new('5 PUSH POP POP PRINT').eval
# Empty stack!

Minilang.new('3 PUSH PUSH 7 DIV MULT PRINT ').eval
# 6

Minilang.new('4 PUSH PUSH 7 MOD MULT PRINT ').eval
# 12

Minilang.new('-3 PUSH 5 XSUB PRINT').eval
# Invalid token: XSUB

Minilang.new('-3 PUSH 5 SUB PRINT').eval
# 8

Minilang.new('6 PUSH').eval
# (nothing printed; no PRINT commands)